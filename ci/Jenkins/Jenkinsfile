pipeline {
  agent any
  parameters {
    string(name: 'build_version', defaultValue: 'V1.0', description: 'Build version to use for Docker image')
  }
  environment {
    DOCKER_IMAGE = "akhilprabhu2005/demo-java-app:${params.build_version}" // Target Docker Hub repo
    SONAR_URL = "http://sonarqube:9000" // SonarQube server URL
  }
  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/deepakkr35/devops-demo-project.git'
      }
    }
    stage('Build and Test') {
      steps {
        script {
          echo "Listing files in the workspace:"
          sh 'ls -ltr'
          echo "Building the project and creating a JAR file"
          sh 'cd demo-java-app && mvn clean package'
        }
      }
    }
    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            cd demo-java-app
            mvn sonar:sonar -Dsonar.login=${SONAR_AUTH_TOKEN} -Dsonar.host.url=${SONAR_URL}
          '''
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        REGISTRY_CREDENTIALS = credentials('dockerhub') // Jenkins credentials for Docker Hub account
      }
      steps {
        script {
          echo "Building the Docker image"
          sh 'cd demo-java-app && docker build -t ${DOCKER_IMAGE} .'
          
          echo "Pushing the Docker image to Docker Hub"
          docker.withRegistry('https://index.docker.io/v1/', REGISTRY_CREDENTIALS) {
            docker.image("${DOCKER_IMAGE}").push()
          }
        }
      }
    }
    stage('Update Deployment File') {
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config user.email "akhilprabhu20@gmail.com"
            git config user.name "akhilprabhu20"
            sed -i "s/tag: .*/tag: \\\"${params.build_version}\\\"/" helm/app/values.yaml
            git add helm/app/values.yaml
            git commit -m "Update deployment image to version ${params.build_version}"
            git push https://${GITHUB_TOKEN}@github.com/akhilprabhu20/devops-demo-project HEAD:main
          '''
        }
      }
    }
    stage('Deploy to Kubernetes') {
      steps {
        script {
          echo "Deploying the updated application to Kubernetes"
          sh '''
            kubectl apply -f helm/app/values.yaml
          '''
        }
      }
    }
  }
}
